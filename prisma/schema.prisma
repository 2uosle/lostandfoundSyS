// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?   // Optional for OAuth users
  role          UserRole  @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lostItems     LostItem[]
  foundItems    FoundItem[]
  activityLogs  ActivityLog[]
  notifications Notification[]
}

enum UserRole {
  ADMIN
  STUDENT
}

model LostItem {
  id          String    @id @default(cuid())
  title       String
  description String
  category    String
  location    String?
  contactInfo String?
  lostDate    DateTime
  status      ItemStatus @default(PENDING)
  imageUrl    String?
  reportedBy  User?     @relation(fields: [userId], references: [id])
  userId      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  matchedWith FoundItem? @relation("ItemMatch", fields: [matchedItemId], references: [id])
  matchedItemId String? @unique

  @@index([category, status])
  @@index([status, createdAt])
  @@index([userId])
}

model FoundItem {
  id          String    @id @default(cuid())
  title       String
  description String
  category    String
  location    String
  contactInfo String?
  foundDate   DateTime
  status      ItemStatus @default(PENDING)
  imageUrl    String?
  reportedBy  User?     @relation(fields: [userId], references: [id])
  userId      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  matchedItem LostItem? @relation("ItemMatch")

  @@index([category, status])
  @@index([status, createdAt])
  @@index([userId])
}

enum ItemStatus {
  PENDING
  MATCHED
  CLAIMED
  ARCHIVED
  RESOLVED
}

model ActivityLog {
  id          String       @id @default(cuid())
  action      AdminAction
  itemType    String       // 'LOST' or 'FOUND'
  itemId      String
  itemTitle   String       // Store title for reference even if item is deleted
  performedBy User         @relation(fields: [userId], references: [id])
  userId      String
  details     String?      // JSON string with additional info (matched item, reason, etc.)
  createdAt   DateTime     @default(now())

  @@index([action, createdAt])
  @@index([itemType, itemId])
  @@index([userId])
  @@index([createdAt])
}

enum AdminAction {
  MATCH
  CLAIM
  ARCHIVE
  DELETE
  RESTORE
  RESOLVE
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      NotificationType
  title     String
  message   String
  itemId    String?  // Reference to the item (lost or found)
  itemType  String?  // 'LOST' or 'FOUND'
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId, read])
  @@index([createdAt])
}

enum NotificationType {
  ITEM_MATCHED
  ITEM_CLAIMED
  ITEM_RESOLVED
  MATCH_FOUND
}
